if (acc > best_accuracy){
best_degree = degree
best_accuracy = acc
best_cost = cost
best_gamma = gamma
}
}
}
rbf.svm.res = svm(X_train_val, y_train_val, kernel = 'radial',
cost = best_cost, gamma = best_gamma, degree = best_degree, probability = TRUE)
rbf.svm.prob = attr(predict(rbf.svm.res, X_test, probability = T), 'probabilities')
rbf.svm.pred = prediction(rbf.svm.prob[, 1], y_test)
rbf.svm.roc = performance(rbf.svm.pred, 'tpr', 'fpr')
rbf.svm.auc = performance(rbf.svm.pred, measure = 'auc')
rbf.svm.auc@y.values
mean(predict(rbf.svm.res, X_test)== y_test)
plot(rbf.svm.roc)
plot(rbf.svm.roc)
rbf.svm.auc@y.values
plot(rbf.svm.res)
plot(rbf.svm.res, data = X)
plot(rbf.svm.res, X, y)
plot(rbf.svm.res, data)
plot(rbf.svm.res, X, col = y)
plot(rbf.svm.res, data.frame(x = X, y = y))
plot(rbf.svm.res, data.frame(x = X_test, y = y_test))
plot(rbf.svm.res, X_test)
plot(rbf.svm.res, X_test, y_test)
?glm
glm.fit = glm(X_train_val, y_train_val, family = 'binomial')
glm.fit = glm(X_train_val, y_train_val, family = binomial)
glm.fit = glm(y_train_val ~ ., data = X_train_val, family = binomial)
glm.fit = glm(X_train_val, family = binomial)
glm.fit = glm(X_train_val, y_train_val, family = binomial)
glm.fit = glm(X_train_val, y_train_val, family = 'binomial')
glm.fit = glm(y_train_val ~ X_train_val, family = 'binomial')
glm.prob = predict(glm.fit, X_test, type = 'response')
glm.prob = predict(glm.fit, newdata = X_test, type = 'response')
glm.prob = predict(glm.fit, as.data.frame(X_test), type = 'response')
glm.prob = predict(glm.fit, as.matrix(X_test), type = 'response')
as.data.frame(X_test)
X_test
as.data.frame(X_test)
as.data.frame(X_train_val)
glm.fit = glm(y_train_val ~ ., as.data.frame(X_train_val), family = 'binomial')
glm.prob = predict(glm.fit, as.matrix(X_test), type = 'response')
summary(glm.fit)
glm.prob = predict(glm.fit, as.data.frame(X_test), type = 'response')
glm.prob
glm.fit = glm(y_train_val ~ ., as.data.frame(X_train_val), family = 'binomial')
glm.prob = predict(glm.fit, as.data.frame(X_test), type = 'response')
glm.pred = prediction(glm.prob, X_test)
glm.pred = prediction(glm.prob, y_test)
glm.pred
glm.roc = performance(glm.pred, 'tpr', 'fpr')
plot(glm.roc)
glm.auc = performance(glm.pred, measure = 'auc')
glm.auc@y.values
mean(predict(glm.fit, as.data.frame(X_test)) == y_test)
predict(glm.fit, X_test)
predict(glm.fit, as.data.frame(X_test))
mean(predict(glm.fit, as.data.frame(X_test), type = 'response') == y_test)
glm.prediction = rep(1, length(y_test))
glm.prediction[glm.prob > 0.5] = 2
mean(glm.prediction == y_test)
nb.prob
install.packages('rpart')
library(rpart)
cart.res = rpart(X_train_val, y_train_val)
cart.res = rpart(y_train_val ~ ., data = as.data.frame(X_train_val))
plotcp(cart.res)
cart.prob = predict(cart.res, X_test)
cart.prob = predict(cart.res, as.data.frame(X_test))
cart.prob
cart.pred = prediction(cart.prob, y_test)
cart.prob = predict(cart.res, as.data.frame(X_test))
cart.pred = prediction(cart.prob[, 2], y_test)
cart.roc = performance(cart.pred, 'tpr', 'fpr')
cart.auc = performance(cart.pred, measure = 'auc')
cart.auc@y.values
plot(cart.roc)
mean(predict(cart.res, as.data.frame(X_test), type = 'class') == y_test)
install.packages('randomForest')
library(randomForest)
?randomForest
rf.res = randomForest(X_train_val, y_train_val, ntree = 100, mtry = 2)
rf.res
rf.pred = predict(rf.res, X_test)
rf.pred
rf.pred = predict(rf.res, X_test, type = 'raw')
rf.pred = predict(rf.res, X_test, type = 'response')
rf.pred
rf.res = randomForest(X_train_val, y_train_val, ntree = 100, mtry = 2, importance = T)
rf.pred = predict(rf.res, X_test, type = 'response')
rf.pred
rf.res
rf.res$forest
rf.res$proximity
rf.res$importance
rf.res$votes
rf.pred
rf.pred = predict(rf.res, X_test, type = 'prob')
rf.pred
rf.prob = predict(rf.res, X_test, type = 'prob')
rf.pred = prediction(rf.prob[, 2], y_test)
rf.roc = performance(rf.pred, 'tpr', 'fpr')
rf.auc = performance(rf.pred, measure = 'auc')
rf.auc@y.values
mean(predict(cart.res, as.data.frame(X_test), type = 'class') == y_test)
plot(rf.roc)
data = read.table('/media/ngoctu/769829E69829A599/workspace/master2/master2/exploration_visuelle_des_donnees/Projet_Visualisation/gordon-2002_database.txt',
sep = '\t')
X = t(data[-(1:2), ])[-1, ]
y = as.vector(t(data[2, ]))
X
View(X)
summary(X)
summary(y)
y
y[1]
y[-1]
y = y[-1]
summary(X)
summary(y)
y
y = as.factor(t(data[2, ]))
summary(y)
yy
y
y[1]
length(y)
nrow(X)
y = y[-1]
summary(y)
y
summary(X)
dim(X)
library(FactoMineR)
pca.res = PCA(X, col = y)
pca.res = PCA(X)
X$3
X
X = as.matrix(X)
X
pca.res = PCA(X)
X[1, 1]
X[1, 2]
as.numeric(X)
X = as.numeric(X)
summary(X)
X
summary(X)
X = t(data[-(1:2), ])[-1, ]
X
X
X = t(data[-(1:2), ])[-1, ]
dim(X)
dim(X)[1]
shape = dim(X)
X = t(data[-(1:2), ])[-1, ]
shape = dim(X)
y = as.factor(t(data[2, ]))
y = y[-1]
X = as.numeric(X)
X = matrix(X, nrow = shape[1], ncol = shape[2])
X
X = t(data[-(1:2), ])[-1, ]
shape = dim(X)
y = as.factor(t(data[2, ]))
y = y[-1]
X = as.numeric(X)
X = matrix(X, nrow = shape[1], ncol = shape[2])
X
X = t(data[-(1:2), ])[-1, ]
shape = dim(X)
y = as.factor(t(data[2, ]))
y = y[-1]
X = as.numeric(X)
X
X = t(data[-(1:2), ])[-1, ]
shape = dim(X)
y = as.factor(t(data[2, ]))
y = y[-1]
X = mapply(X, FUN = as.numeric)
X = matrix(data = X, nrow = shape[1], ncol = shape[2])
X
X[0]
X[1]
X[1, 1]
summary(X)
dim(X)
X[2, 1]
library(FactoMineR)
pca.res = PCA(X)
pca.res = PCA(X, col = y)
?PCA
?plot
?PCA
res.pca = PCA(X, col = y)
res.pca = PCA(X)
?PCA
plot(res.pca)
?PCA
plot(res.pca, choix = 'ind')
plot(res.pca, choix = 'ind', habillage=1)
plot(res.pca, choix = 'ind', habillage=2)
plot(res.pca, choix = 'ind', habillage=3)
plot(res.pca, choix = 'ind', habillage=5)
plot(res.pca, choix = 'ind', habillage = y)
df = data.frame(X, y)
df
dim(df)
res.pca = PCA(df)
res.pca = PCA(df[, -1627])
plot(res.pca, choix = 'ind', habillage = y)
y
res.pca = PCA(X)
y = apply(y, FUN = renommer)
y[y == 'MDM'] = 'M'
y
y[y == 'MPM']
y[y == 'MPM'] = 1
for (item in y){
if (item == 'MPM')
item = 'M'
else
item = 'A"'
}
for (item in y){
if (item == 'MPM')
item = 'M'
else
item = 'A'
}
for (item in y)
cat(item)
y
y = as.factor(t(data[2, ]))
y = y[-1]
y
for (i in 1:length(y)){
if (y[i] == 'MPM')
y[i] = 'M'
else
y[i] = 'A'
}
y
y = t(data[2, ])
y = y[-1]
y = as.factor(y)
y
for (i in 1:length(y)){
if (y[i] == 'MPM')
y[i] = 'M'
else
y[i] = 'A'
}
y
y = t(data[2, ])
y = y[-1]
y = as.factor(y)
y
length(y)
y[1]
y[1] == 'MPM'
warnings()
y = t(data[2, ])
y = y[-1]
res.pca = PCA(X)
plot(res.pca, habillage = y)
y
y = as.factor(y)
?plot.PCA
plot.PCA(res.pca, habillage = y)
plot.PCA(res.pca, col = y)
plot.PCA(res.pca)
library(MASS)
library(klaR)
library(mda)
data = iris
X = data[, -5]
y = data[, 5]
res.pca = PCA(X)
plot(res.pca, habillage = y)
plot(res.pca, col =  y)
renommer = function(a){
if (a == 'virginica')
return('a')
if (a == 'versicolor')
return('e')
if (a == 'setosa')
return('s')
}
X_train$Species = sapply(X_train$Species, renommer)
X_test$Species = sapply(X_test$Species, renommer)
set.seed(10)
num_train = as.integer(nrow(X) * 0.8)
num_test = N - num_train
tr = sample(1:N, num_train)
X_train = iris[tr, ]
X_test = iris[-tr, ]
X_train$Species = sapply(X_train$Species, renommer)
X_test$Species = sapply(X_test$Species, renommer)
res.pca = PCA(X_train)
res.pca = PCA(X_train[, -5])
data = read.table('/media/ngoctu/769829E69829A599/workspace/master2/master2/exploration_visuelle_des_donnees/Projet_Visualisation/gordon-2002_database.txt',
sep = '\t')
X = t(data[-(1:2), ])[-1, ]
shape = dim(X)
y = t(data[2, ])
y = y[-1]
y = as.factor(y)
X = mapply(X, FUN = as.numeric)
X = matrix(data = X, nrow = shape[1], ncol = shape[2])
summary(X)
summary(y)
df = data.frame(X, y)
library(FactoMineR)
res.pca = PCA(X)
plot.PCA(res.pca)
res.pca = PCA(df, quali.sup = 1627)
res.pca = PCA(df, scale.unit = T, ncp = 2, quali.sup = 1627)
plot.PCA(res.pca, choix = 'ind', habillage = 1627)
gordon = data.frame(X, y)
res.pca = PCA(gordon, scale.unit = T, ncp = 2, quali.sup = 1627)
plot.PCA(res.pca, choix = 'ind', habillage = 1627)
?fda
res.adl = fda(y ~ ., data = X)
res.adl = fda(y ~ ., data = gordon[, -1627])
plot(res.adl)
res.adl = fda(y ~ ., data = gordon[, -1627], dimension = 2)
res.adl
plot(res.adl)
coef(res.adl)
library(MASS)
res.adl_ = lda(y ~., data = gordon[, -1627])
X = scale(X, center = T, scale = T)
gordon = data.frame(X, y)
res.pca = PCA(gordon, scale.unit = T, ncp = 2, quali.sup = 1627)
plot.PCA(res.pca, choix = 'ind', habillage = 1627)
gordon
View(gordon)
res.adl_ = lda(y ~., data = gordon[, -1627])
data[1, ]
data[3,]
t(data)[3,]
t(data)[2,]
t(data)[1,]
res.adl_ = lda(y ~., data = gordon)
plot(res.adl_)
plot(res.adl)
res.adl = lda(y ~., data = gordon)
plot(res.adl)
res.adl$svd
res.adl$xlevels
res.adl$means
set.seed(2018)
df = data.frame(X, y)
set.seed(2018)
set.seed(2018)
tr = sample(1:nrow(X), as.integer(0.8 * nrow(X)))
train = df[tr, ]
test = df[-tr, ]
res.adl = lda(y ~., data = train)
predict.adl = predict(res.adl, test[, -1627])
predict.adl
table(predict.adl$class, test[, 1627])
plot(res.adl)
predict.adl$x
plot(predict.adl$x)
plot(predict.adl$x, col = test[, -1627])
plot(predict.adl$x, col = as.integer(test[, -1627])
)
plot(predict.adl$x, col = as.integer(test[, -1627]))
test[, -1627]
plot(predict.adl$x, col = as.integer(test[, 1627]))
?lda
predict.adl
plot(res.adl, panel = panel.lda)
plot(res.adl, panel = panel.lda, dimen = 2)
plot(res.adl, panel = panel.lda, dimen = 1)
plot(res.adl, panel = panel.lda, dimen = 3)
res.adl$scaling
dim(train)
projected_data = as.matrix(train[, -1627]) %*% res.adl$scaling
projected_data = as.matrix(df[, -1627]) %*% res.adl$scaling
dim(df)
dim(res.adl$scaling)
dim(projected_data)
plot(projected_data, col = df[, 1627])
plot(projected_data, col = df[, 1627], pch = 19)
?lda
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
setwd('../3_mnist/')
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('MNIST5.mat')
library(R.matlab)
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('MNIST5.mat')
donnees$y = as.factor(donnees$y)
donnees = data.frame(donnees$X, donnees$y)
habillage = dim(donnees)[2]
setwd('../3_mnist/')
png('scattermatrix.png', width = 800, height = 600, units = 'px')
pairs(donnees[, 1:5], col = donnees$donnees.y)
dev.off()
pairs(donnees[, 6:10], col = donnees$donnees.y)
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('MFEAT1.mat')
donnees$y = as.factor(donnees$y)
donnees = data.frame(donnees$X, donnees$y)
habillage = dim(donnees)[2]
setwd('../4_mfea/')
png('scattermatrix.png', width = 800, height = 600, units = 'px')
pairs(donnees[, 1:10], col = donnees$donnees.y)
dev.off()
library(FactoMineR)
library(Rtsne)
donnees.acp = PCA(donnees, ncp = 30, scale.unit = T, graph = F, quali.sup = habillage)
png('PCA1.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind')
dev.off()
png('PCA2.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind', habillage = habillage)
dev.off()
donnees.tsne = Rtsne(donnees[, -habillage], dims = 2, perplexity = 30, max_iter = 3000, check_duplicate = F)
png('tsne1.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
png('tsne2.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, col = donnees[, habillage], xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
library(R.matlab)
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('COIL20_1440n_1024d_20c.mat')
donnees$y = as.factor(donnees$y)
donnees = data.frame(donnees$X, donnees$y)
habillage = dim(donnees)[2]
setwd('../5_coil20//')
png('scattermatrix.png', width = 800, height = 600, units = 'px')
pairs(donnees[, 1:10], col = donnees$donnees.y)
dev.off()
donnees.acp = PCA(donnees, ncp = 30, scale.unit = T, graph = F, quali.sup = habillage)
png('PCA1.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind')
dev.off()
png('PCA2.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind', habillage = habillage)
dev.off()
donnees.tsne = Rtsne(donnees[, -habillage], dims = 2, perplexity = 30, max_iter = 3000, check_duplicate = F)
png('tsne1.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
png('tsne2.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, col = donnees[, habillage], xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('USPS.mat')
donnees$y = as.factor(donnees$y)
donnees = data.frame(donnees$X, donnees$y)
habillage = dim(donnees)[2]
setwd('../6_usps/')
png('scattermatrix.png', width = 800, height = 600, units = 'px')
pairs(donnees[, 1:10], col = donnees$donnees.y)
dev.off()
donnees.acp = PCA(donnees, ncp = 30, scale.unit = T, graph = F, quali.sup = habillage)
png('PCA1.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind')
dev.off()
png('PCA2.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind', habillage = habillage)
dev.off()
donnees.tsne = Rtsne(donnees[, -habillage], dims = 2, perplexity = 30, max_iter = 3000, check_duplicate = F)
png('tsne1.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
png('tsne2.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, col = donnees[, habillage], xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('Optdigits.mat')
donnees$y = as.factor(donnees$y)
donnees = data.frame(donnees$X, donnees$y)
habillage = dim(donnees)[2]
setwd('../7_optidigits/')
png('scattermatrix.png', width = 800, height = 600, units = 'px')
pairs(donnees[, 1:10], col = donnees$donnees.y)
dev.off()
donnees.acp = PCA(donnees, ncp = 30, scale.unit = T, graph = F, quali.sup = habillage)
png('PCA1.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind')
dev.off()
png('PCA2.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind', habillage = habillage)
dev.off()
donnees.tsne = Rtsne(donnees[, -habillage], dims = 2, perplexity = 30, max_iter = 3000, check_duplicate = F)
png('tsne1.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
png('tsne2.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, col = donnees[, habillage], xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('MNIST5.mat')
donnees$y = as.factor(donnees$y)
donnees = data.frame(donnees$X, donnees$y)
habillage = dim(donnees)[2]
setwd('../3_mnist/')
png('scattermatrix.png', width = 800, height = 600, units = 'px')
pairs(donnees[, 1:10], col = donnees$donnees.y)
dev.off()
