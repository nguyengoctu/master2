library(MASS)
install.packages('RColorBrewer')
library(RColorBrewer)
library(class)
mycols = brewer.pal(8, 'Dark2')[c(3, 2)]
s = sqrt(1/5)
set.seed(30)
makeX = function(M, n = 100, sigma = diag(2) * s){
z = sample(1:nrow(M), n, replace = TRUE)
m = M[z, ]
return(t(apply(m, 1, function(mu) mvrnorm(1, mu, sigma))))
}
M0 = mvrnorm(10, c(1, 0), diag(2))) # Gerer 10 moyennes
M0 = mvrnorm(10, c(1, 0), diag(2)) # Gerer 10 moyennes
x0 = makeX(M0)
M1 = mvrnorm(10, c(1, 0), diag(2))
M1
x1 = makeX(M1)
x = rbind(x0, x1)
x
y = c(rep(0, 100), rep(1, 100))
cols = mycols[y + 1]
cols
x
y
plot(x)
plot(x, color = y)
plot(x, col = y)
plot(x, col = y)
plot(x, col = y)
plot(x, color = y)
x
y
plot(x[, 1], x[, 2], col = y)
x[, 1]
nrow(y)
ncol(y)
length(y)
installed.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(data = x, colour = y)
qplot(x = x[, 1], y = x[, 2], colour = y)
plot(x[, 1], x[, 2], col = y)
qplot(x[, 1], x[, 2], col = y)
boxplot(x)
summary(x)
mean(x)
M0 = mvrnorm(10, c(1, 0), diag(2)) # Gerer 10 moyennes
x0 = makeX(M0)
M1 = mvrnorm(10, c(0, 1), diag(2))
x1 = makeX(M1)
x = rbind(x0, x1)
y = c(rep(0, 100), rep(1, 100))
cols = mycols[y + 1]
plot(x[, 1], x[, 2], col = y)
qplot(x[, 1], x[, 2], col = y)
plot(x, pch = ym col = y)
plot(x, pch = y, col = y)
X=x ;Y=y+1
plot(X, pch=Y, col=Y)
legend("topright", legend=c("classe 1", "classe 2"), pch=1:2, col=1:2)
GS <- 75
XLIM <- range(x[,1])
tmpx <- seq(XLIM[1], XLIM[2], len=GS)
YLIM <- range(x[,2])
tmpy <- seq(YLIM[1], YLIM[2], len=GS)
# Créer une grille de points
newx <- expand.grid(tmpx, tmpy)
GS <- 75
XLIM <- range(x[,1])
tmpx <- seq(XLIM[1], XLIM[2], len=GS)
YLIM <- range(x[,2])
tmpy <- seq(YLIM[1], YLIM[2], len=GS)
# Créer une grille de points
newx <- expand.grid(tmpx, tmpy)
X1 <- x[,1]
X2 <- x[,2]
linear.fit <- lm(y~X1+X2)
m <- -linear.fit$coef[2]/linear.fit$coef[3]
b <- (0.5 - linear.fit$coef[1])/linear.fit$coef[3]
yhat <- predict(linear.fit, newdata=data.frame(X1=newx[,1],X2=newx[,2])) yhat <- as.numeric(yhat>0.5)
yhat <- predict(linear.fit, newdata=data.frame(X1=newx[,1],X2=newx[,2]))
yhat <- as.numeric(yhat>0.5)
colshat <- mycols[as.numeric(yhat>0.5)+1]
points(newx,col=colshat,pch=".")
points(x,col=cols) title("Régression linéair")
points(x,col=cols)
title("Régression linéair")
plot(x,col=cols,xlab="X1",ylab="X2",xlim=XLIM,ylim=YLIM,type="n")
abline(b,m)
points(newx,col=colshat,pch=".")
points(x,col=cols)
title("Régression linéair")
linear.fit <- lm(y~2*X1+X2)
linear.fit <- lm(y~(2*X1)+X2)
linear.fit <- lm(y~X1+X2)
linear.fit <- lm(y~x)
m <- -linear.fit$coef[2]/linear.fit$coef[3]
b <- (0.5 - linear.fit$coef[1])/linear.fit$coef[3]
plot(x,col=cols,xlab="X1",ylab="X2",xlim=XLIM,ylim=YLIM,type="n")
abline(b,m)
points(newx,col=colshat,pch=".")
points(x,col=cols)
qplot(X, col = Y)
qplot(x[, 1], x[, 2], col = Y)
library(class)
Xtest<- matrix(c(0,0,-2,2), nrow=2, byrow=TRUE)
pred <- knn(X,Xtest, Y,15)
pred
pred_train <- knn(X, X,Y,15)
pred_train != Y
sum(pred_train!=Y)/length(Y)
pred_train <- knn(X, X,Y,1)
sum(pred_train!=Y)/length(Y)
yhat <- knn(x, newx, y, k=1)
colshat <- mycols[as.numeric(yhat)]
plot(x, xlab="X1", ylab="X2", xlim=XLIM, ylim=YLIM, type="n")
points(newx, col=colshat, pch=".")
contour(tmpx, tmpy, matrix(as.numeric(yhat),GS,GS), levels=c(1,2), add=TRUE, drawlabels=FALSE)
points(x, col=cols) title("KNN (1)")
plot(x, xlab="X1", ylab="X2", xlim=XLIM, ylim=YLIM, type="n")
x
plot(X, xlab="X1", ylab="X2", xlim=XLIM, ylim=YLIM, type="n")
X
plot(x, xlab="X1", ylab="X2", xlim=XLIM, ylim=YLIM, type="n")
yhat <- knn(x, newx, y, k=1)
colshat <- mycols[as.numeric(yhat)]
plot(x, xlab="X1", ylab="X2", xlim=XLIM, ylim=YLIM, type="n")
points(newx, col=colshat, pch=".")
contour(tmpx, tmpy, matrix(as.numeric(yhat),GS,GS), levels=c(1,2), add=TRUE, drawlabels=FALSE)
points(x, col=cols)
title("KNN (1)")
yhat <- knn(x, newx, y, k=15)
colshat <- mycols[as.numeric(yhat)]
plot(x, xlab="X1", ylab="X2", xlim=XLIM, ylim=YLIM, type="n")
points(newx, col=colshat, pch=".")
contour(tmpx, tmpy, matrix(as.numeric(yhat),GS,GS), levels=c(1,2), add=TRUE, drawlabels=FALSE)
points(x, col=cols)
title("KNN (1)")
title("KNN (15)")
points(x, col=cols)
title("KNN (15)")
set.seed(30)
tr <- sample(1:nrow(data),150) Xtrain <- X[tr,]
tr <- sample(1:nrow(data),150)
tr <- sample(1:nrow(x),150)
Xtrain <- X[tr,]
Xtest <- data[-tr,]
Ytest <- y[-tr,]
pred_test <- knn(X,Xtest,Y,15) sum(pred_test!=Ytest)/length(Ytest)
tr <- sample(1:nrow(X),150)
Xtrain <- X[tr,]
Xtest <- X[-tr,]
Ytest <- y[-tr,]
Ytest <- y[-tr]
pred_test <- knn(X,Xtest,Y,15) sum(pred_test!=Ytest)/length(Ytest)
pred_test <- knn(X,Xtest,Y,15)
sum(pred_test!=Ytest)/length(Ytest)
pred_test <- knn(X,Xtest,Y,1)
sum(pred_test!=Ytest)/length(Ytest)
?knn
Ytrain = y[tr]
pred_test <- knn(Xtrain,Xtest,Ytrain,15)
sum(pred_test!=Ytest)/length(Ytest)
pred_test <- knn(Xtrain,Xtest,Ytrain,1)
sum(pred_test!=Ytest)/length(Ytest)
tr <- sample(1:nrow(X),100)
Xtrain <- X[tr,]
Xtest <- X[-tr,]
Ytrain = y[tr]
Ytest <- y[-tr]
pred_test <- knn(Xtrain,Xtest,Ytrain,15)
sum(pred_test!=Ytest)/length(Ytest)
pred_test <- knn(Xtrain,Xtest,Ytrain,1)
sum(pred_test!=Ytest)/length(Ytest)
X
matrix(sample.int(15, size = 10 * 3, replace = TRUE), nrow = 10, ncol = 3)
X = matrix(sample.int(15, size = 10 * 3, replace = TRUE), nrow = 10, ncol = 3)
X
a = 3
b = 6
X[a:b, ]
colMeans(X[a:b, ])
scale(X[a:b], center = TRUE)
scale(X[a:b, ], center = TRUE)
scale(X[a:b, ], center = TRUE, scale = FALSE)
Y = scale(X[a:b, ], center = TRUE, scale = FALSE)
Y ** 2
X=matrix(nrow=10000,ncol=2)
for (i in 1:10000) {
Z=rbinom(1,1,2/3)
if (Z==1) {
X[i,1]=rnorm(1,2,1)
X[i,2]=rnorm(1,1,1)
}
else{
X[i,1]=rnorm(1,7,1)
X[i,2]=rnorm(1,5,1)
}
}
plot(X)
summary(X)
plot(density(X))
wait <- normalmixEM(X, lambda = .5, mu = c(50, 60), sigma = 5)
library(mclust)
res.mclust = Mclust(X, 2)
summary(res.mclust)
res.mclust$parameters$mean
X=matrix(nrow=10000,ncol=2)
for (i in 1:10000) {
Z=rbinom(1,1,2/3)
if (Z==1) {
X[i,1]=rnorm(1,2,1)
X[i,2]=rnorm(1,1,1)
}
else{
X[i,1]=rnorm(1,7,1)
X[i,2]=rnorm(1,5,1)
}
}
plot(X)
summary(X)
plot(density(X))
wait <- normalmixEM(X, lambda = .5, mu = c(50, 60), sigma = 5)
library(mixtools)
data(birds)
library(Rmixmod)
data(birds)
dim(birds)
birds
xem.birds <- mixmodCluster(birds, 2)
summary(xem.birds)
library(mclust)
data(diabetes)
class <- diabetes$class
table(class)
X <- diabetes[,-1]
head(X)
res.pca=PCA(X)
clPairs(X, class)
library(FactoMineR)
data(diabetes)
class <- diabetes$class
table(class)
X <- diabetes[,-1]
head(X)
res.pca=PCA(X)
clPairs(X, class)
res.mclust <- Mclust(X,3)
summary(res.mclust)
table(res.mclust$class,diabetes$class)
res.kmeans=kmeans(X,3,nstart=100)
table(res.kmeans$cluster,diabetes$class)
install.packages('gdata')
library(gdata)
data = read.xls('~/master2/master2/mixture models/Chang_15.xlsx', 1)
label = read.xls('~/master2/master2/mixture models/Chang_True.xlsx', 1)
summary(data)
plot(data)
pairs(data, col = label)
dim(data)
pairs(data[, 1:15], col = label)
pairs(data[, 1:5], col = label)
pairs(data[, 1:5])
label
pairs(data[, 1:5], col = label)
pairs(data[, 1:5])
pairs(data)
pairs(data[, 1: 3])
library(FactoMineR)
res = PCA(data)
?plot.PCA
plot.PCA(res)
?plot.PCA
plot.PCA(res, choix = 'ind')
?plot.PCA
plot.PCA(res, choix = 'var')
?plot.PCA
plot.PCA(res, choix = 'varcor')
pairs(data[, 1: 3], col = label + 1)
label
label = label + 1
label
pairs(data[, 1: 3], col = label)
label = label - 1
label
install.packages('Nbclust')
install.packages('NbClust')
library(NbClust)
res.NbClust.kmeans = NbClust(data, method = 'kmeans', min.nc = 2, max.nc = 8, index = 'all')
res.NbClust.kmeans$Best.partition
res.NbClust.single = NbClust(data, distance = 'euclidean', method = 'single', min.nc = 2, max.nc = 8, index = 'all')
res.NbClust.kmeans$Best.partition
res.NbClust.single = NbClust(data, distance = 'euclidean', method = 'single', min.nc = 2, max.nc = 8, index = 'all')
library(mclust)
res.mclust = Mclust(data, 2)
res.mclust
res.mclust$BIC
res.mclust$bic
res.mclust$classification
res.mclust$G
summary(res.mclust)
library(Rmixmod)
res.Rmixmod = mixmodCluster(data, 2)
summary(res.Rmixmod)
res = PCA(data, ncp = 15)
plot.PCA(res, axes = c(1, 2))
summary(res.mclust)
res.Rmixmod = mixmodCluster(data, 2)
summary(res.Rmixmod)
res.Rmixmod
MclustDR(res.mclust)
?MclustDR
MclustDR(res.mclust)
res.mclustDR = MclustDR(res.mclust)
plot(res.mclustDR, what = 'scatterplot')
?MclustDR
plot(res.mclustDR, what = 'scatterplot')
plot(res.mclustDR, what = 'evalues')
?MclustDR
dr = MclustDR(res.mclust)
plot(dr, what = 'scatterplot')
pairs(data[, 1:3])
pairs(data[, 2:3])
plot(data[, 1], data[, 3])
plot(data[, 2], data[, 3])
plot(dr, what = 'evalues')
plot(dr, what = 'scatterplot')
res.mclust$classification
plot.PCA(res, axes = c(1, 2))
plot.PCA(res, axes = c(1, 2))
plot.PCA(res, axes = c(1, 2), col.hab = res.mclust$classification)
classification
plot.PCA(res, axes = c(1, 2), col.hab = res.mclust$classification)
res
plot.PCA(res, axes = c(1, 2))
?plot.PCA
plot.PCA(res, axes = c(1, 2), habillage = 'ind')
?plot.PCA
plot.PCA(res, axes = c(1, 2), habillage = res.mclust$classification)
res.mclust$classification
plot.PCA(res, axes = c(1, 2), col = res.mclust$classification)
plot(data[, 1], data[, 3], col = res.mclust$classification)
plot(data[, 1], data[, 3], col = label)
plot(data[, 1], data[, 3], col = (label + 1))
label
label
plot(data[, 1], data[, 3], col = label$True)
plot(data[, 1], data[, 3], col = label$True + 1)
plot(data[, 1], data[, 3], col = res.mclust$classification)
res.Rmixmod
?mixmodCluster
plot(res.Rmixmod)
?mixmodCluster
hist(res.Rmixmod)
plot(dr, what = 'scatterplot')
plot(data[, 1], data[, 15], col = res.mclust$classification)
plot(data[, 1], data[, 15], col = label$True + 1)
library(Rmixmod)
res.Rmixmod = mixmodCluster(data, 2)
summary(res.Rmixmod)
plot(res.Rmixmod)
adjustedRandIndex(label, res.mclust$classification)
adjustedRandIndex(label$True, res.mclust$classification)
class.mixmod = slot(slot(res.Rmixmod, "bestResult"), "partition")
adjustedRandIndex(label$True, class.mixmod)
class.mixmod
plot(data[, 1], data[, 15], col = res.mclust$classification)
plot(data[, 1], data[, 15], col = res.mclust$classification)
res.mclust
plot(data[, 1], data[, 15], col = res.mclust$classification)
plot(data[, 1], data[, 15], col = label$True + 1)
plot(data[, 1], data[, 15], col = res.mclust$classification)
plot(data[, 1], data[, 15], col = label$True + 1)
plot(data[, 1], data[, 15], col = class.mixmod)
plot(data[, 1], data[, 15], col = class.mixmod)
plot(data[, 1], data[, 15], col = label$True + 1)
plot(data[, 1], data[, 15], col = res.mclust$classification)
plot(data[, 1], data[, 15], col = class.mixmod)
adjustedRandIndex(label$True, class.mixmod)
adjustedRandIndex(label$True, res.mclust$classification)
table(label$True, res.mclust$classification)
table(label$True, class.mixmod)
plot(dr, what = 'scatterplot')
install.packages(cluspca)
install.packages('cluspca')
install.packages('cluspca')
install.packages('Rmatlab')
install.packages('R.matlab')
library(R.matlab)
jaffe = readMat('~/master2/master2/mixture models/jaffe_213n_676d_10c.mat')
jaffe
summary(jaffe)
jaffe$y
jaffe$X
dim(jaffe)
dim(jaffe$X)
dim(jaffe$y)
summary(jaffe$y)
jaffe$y
dim(jaffe$X)
dim(jaffe$y)
as.vector(jaffe$y)
jaffe_label = as.vector(jaffe$y)
jaffe.NbClust.kmeans = NbClust(X, method = 'kmeans', min.nc = 2, max.nc = 15, index = 'all')
jaffe_data = jaffe$X
jaffe.NbClust.kmeans = NbClust(X, method = 'kmeans', min.nc = 2, max.nc = 15, index = 'all')
jaffe.NbClust.kmeans = NbClust(jaffe_data, method = 'kmeans', min.nc = 2, max.nc = 15, index = 'all')
jaffe.NbClust.kmeans = NbClust(jaffe_data, method = 'kmeans', min.nc = 2, max.nc = 10, index = 'all')
jaffe_data = as.matrix(jaffe$X)
jaffe.NbClust.kmeans = NbClust(jaffe_data, method = 'kmeans', min.nc = 2, max.nc = 10, index = 'all')
jaffe_data
jaffe.NbClust.kmeans = NbClust(jaffe_data, method = 'kmeans', min.nc = 2, max.nc = 10, index = 'all')
jaffe_data = scale(jaffe$X, scale = F)
jaffe.NbClust.kmeans = NbClust(jaffe_data, method = 'kmeans', min.nc = 2, max.nc = 10, index = 'all')
install.packages('blockcluster')
library(blockcluster)
install.packages('rtkore')
install.packages("rtkore")
library(blockcluster)
library(R.matlab)
setwd('~/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
library(R.matlab)
setwd('~/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('UMIST1.mat')
donnees$y = as.factor(donnees$y)
donnees = data.frame(donnees$X, donnees$y)
habillage = dim(donnees)[2]
setwd('~/master2/master2/mixture models/projet/2_umist/')
png('scattermatrix.png', width = 800, height = 600, units = 'px')
pairs(donnees[, 1:10], col = donnees$donnees.y)
dev.off()
library(FactoMineR)
library(Rtsne)
donnees.acp = PCA(donnees, ncp = 30, scale.unit = T, graph = F, quali.sup = habillage)
png('PCA1.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind')
dev.off()
png('PCA2.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind', habillage = habillage)
dev.off()
donnees.tsne = Rtsne(donnees[, -habillage], dims = 2, perplexity = 30, max_iter = 1000, check_duplicate = F)
png('tsne1.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
png('tsne2.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, col = donnees[, habillage], xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
donnees.tsne = Rtsne(donnees[, -habillage], dims = 2, perplexity = 30, max_iter = 2000, check_duplicate = F)
png('tsne1.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
png('tsne2.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, col = donnees[, habillage], xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
library(NbClust)
donnees.nbclust.kmeans = NbClust(donnees.acp$ind$coord, method = 'kmeans', min.nc = 2, max.nc = 20, index = 'all')
donnees.nbclust.single = NbClust(donnees.acp$ind$coord, method = 'single', min.nc = 2, max.nc = 20, index = 'all')
donnees.nbclust.average = NbClust(donnees.acp$ind$coord, method = 'average', min.nc = 2, max.nc = 20, index = 'all')
donnees.nbclust.complete = NbClust(donnees.acp$ind$coord, method = 'complete', min.nc = 2, max.nc = 20, index = 'all')
donnees.nbclust.ward = NbClust(donnees.acp$ind$coord, method = 'ward.D', min.nc = 2, max.nc = 20, index = 'all')
K = 3
donnees.mclust = Mclust(donnees[, -habillage], 3)
library(Rmixmod)
library(mclust)
donnees.mclust = Mclust(donnees[, -habillage], 3)
donnees.rmixmod = mixmodCluster(donnees[, -habillage], 3)
png('mclust.png', width = 800, height = 600, units = 'px')
par(mfrow = c(1, 2))
plot(dr, what = 'scatterplot')
plot(dr, what = 'evalues')
dev.off()
dr = MclustDR(donnees.mclust)
png('mclust.png', width = 800, height = 600, units = 'px')
par(mfrow = c(1, 2))
plot(dr, what = 'scatterplot')
plot(dr, what = 'evalues')
dev.off()
adjustedRandIndex(donnees$donnees.y, donnees.mclust$classification) # 0.8056816
library(R.matlab)
setwd('~/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('MNIST5.mat')
donnees$y = as.factor(donnees$y)
donnees = data.frame(donnees$X, donnees$y)
habillage = dim(donnees)[2]
setwd('~/master2/master2/mixture models/projet/3_mnist/')
library(FactoMineR)
library(Rtsne)
donnees.acp = PCA(donnees, ncp = 30, scale.unit = T, graph = F, quali.sup = habillage)
png('PCA1.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind')
dev.off()
png('PCA2.png', width = 800, height = 600, units = 'px')
plot(donnees.acp, choix = 'ind', habillage = habillage)
dev.off()
donnees.tsne = Rtsne(donnees[, -habillage], dims = 2, perplexity = 30, max_iter = 3000, check_duplicate = F)
png('tsne1.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
png('tsne2.png', width = 800, height = 600, units = 'px')
plot(donnees.tsne$Y, col = donnees[, habillage], xlab = 't-SNE dim 1', ylab = 't-SNE dim 2', main = 't-SNE')
dev.off()
library(R.matlab)
setwd('~/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('MFEAT1.mat')
