shape = dim(X)
X = t(data[-(1:2), ])[-1, ]
shape = dim(X)
y = as.factor(t(data[2, ]))
y = y[-1]
X = as.numeric(X)
X = matrix(X, nrow = shape[1], ncol = shape[2])
X
X = t(data[-(1:2), ])[-1, ]
shape = dim(X)
y = as.factor(t(data[2, ]))
y = y[-1]
X = as.numeric(X)
X = matrix(X, nrow = shape[1], ncol = shape[2])
X
X = t(data[-(1:2), ])[-1, ]
shape = dim(X)
y = as.factor(t(data[2, ]))
y = y[-1]
X = as.numeric(X)
X
X = t(data[-(1:2), ])[-1, ]
shape = dim(X)
y = as.factor(t(data[2, ]))
y = y[-1]
X = mapply(X, FUN = as.numeric)
X = matrix(data = X, nrow = shape[1], ncol = shape[2])
X
X[0]
X[1]
X[1, 1]
summary(X)
dim(X)
X[2, 1]
library(FactoMineR)
pca.res = PCA(X)
pca.res = PCA(X, col = y)
?PCA
?plot
?PCA
res.pca = PCA(X, col = y)
res.pca = PCA(X)
?PCA
plot(res.pca)
?PCA
plot(res.pca, choix = 'ind')
plot(res.pca, choix = 'ind', habillage=1)
plot(res.pca, choix = 'ind', habillage=2)
plot(res.pca, choix = 'ind', habillage=3)
plot(res.pca, choix = 'ind', habillage=5)
plot(res.pca, choix = 'ind', habillage = y)
df = data.frame(X, y)
df
dim(df)
res.pca = PCA(df)
res.pca = PCA(df[, -1627])
plot(res.pca, choix = 'ind', habillage = y)
y
res.pca = PCA(X)
y = apply(y, FUN = renommer)
y[y == 'MDM'] = 'M'
y
y[y == 'MPM']
y[y == 'MPM'] = 1
for (item in y){
if (item == 'MPM')
item = 'M'
else
item = 'A"'
}
for (item in y){
if (item == 'MPM')
item = 'M'
else
item = 'A'
}
for (item in y)
cat(item)
y
y = as.factor(t(data[2, ]))
y = y[-1]
y
for (i in 1:length(y)){
if (y[i] == 'MPM')
y[i] = 'M'
else
y[i] = 'A'
}
y
y = t(data[2, ])
y = y[-1]
y = as.factor(y)
y
for (i in 1:length(y)){
if (y[i] == 'MPM')
y[i] = 'M'
else
y[i] = 'A'
}
y
y = t(data[2, ])
y = y[-1]
y = as.factor(y)
y
length(y)
y[1]
y[1] == 'MPM'
warnings()
y = t(data[2, ])
y = y[-1]
res.pca = PCA(X)
plot(res.pca, habillage = y)
y
y = as.factor(y)
?plot.PCA
plot.PCA(res.pca, habillage = y)
plot.PCA(res.pca, col = y)
plot.PCA(res.pca)
library(MASS)
library(klaR)
library(mda)
data = iris
X = data[, -5]
y = data[, 5]
res.pca = PCA(X)
plot(res.pca, habillage = y)
plot(res.pca, col =  y)
renommer = function(a){
if (a == 'virginica')
return('a')
if (a == 'versicolor')
return('e')
if (a == 'setosa')
return('s')
}
X_train$Species = sapply(X_train$Species, renommer)
X_test$Species = sapply(X_test$Species, renommer)
set.seed(10)
num_train = as.integer(nrow(X) * 0.8)
num_test = N - num_train
tr = sample(1:N, num_train)
X_train = iris[tr, ]
X_test = iris[-tr, ]
X_train$Species = sapply(X_train$Species, renommer)
X_test$Species = sapply(X_test$Species, renommer)
res.pca = PCA(X_train)
res.pca = PCA(X_train[, -5])
data = read.table('/media/ngoctu/769829E69829A599/workspace/master2/master2/exploration_visuelle_des_donnees/Projet_Visualisation/gordon-2002_database.txt',
sep = '\t')
X = t(data[-(1:2), ])[-1, ]
shape = dim(X)
y = t(data[2, ])
y = y[-1]
y = as.factor(y)
X = mapply(X, FUN = as.numeric)
X = matrix(data = X, nrow = shape[1], ncol = shape[2])
summary(X)
summary(y)
df = data.frame(X, y)
library(FactoMineR)
res.pca = PCA(X)
plot.PCA(res.pca)
res.pca = PCA(df, quali.sup = 1627)
res.pca = PCA(df, scale.unit = T, ncp = 2, quali.sup = 1627)
plot.PCA(res.pca, choix = 'ind', habillage = 1627)
gordon = data.frame(X, y)
res.pca = PCA(gordon, scale.unit = T, ncp = 2, quali.sup = 1627)
plot.PCA(res.pca, choix = 'ind', habillage = 1627)
?fda
res.adl = fda(y ~ ., data = X)
res.adl = fda(y ~ ., data = gordon[, -1627])
plot(res.adl)
res.adl = fda(y ~ ., data = gordon[, -1627], dimension = 2)
res.adl
plot(res.adl)
coef(res.adl)
library(MASS)
res.adl_ = lda(y ~., data = gordon[, -1627])
X = scale(X, center = T, scale = T)
gordon = data.frame(X, y)
res.pca = PCA(gordon, scale.unit = T, ncp = 2, quali.sup = 1627)
plot.PCA(res.pca, choix = 'ind', habillage = 1627)
gordon
View(gordon)
res.adl_ = lda(y ~., data = gordon[, -1627])
data[1, ]
data[3,]
t(data)[3,]
t(data)[2,]
t(data)[1,]
res.adl_ = lda(y ~., data = gordon)
plot(res.adl_)
plot(res.adl)
res.adl = lda(y ~., data = gordon)
plot(res.adl)
res.adl$svd
res.adl$xlevels
res.adl$means
set.seed(2018)
df = data.frame(X, y)
set.seed(2018)
set.seed(2018)
tr = sample(1:nrow(X), as.integer(0.8 * nrow(X)))
train = df[tr, ]
test = df[-tr, ]
res.adl = lda(y ~., data = train)
predict.adl = predict(res.adl, test[, -1627])
predict.adl
table(predict.adl$class, test[, 1627])
plot(res.adl)
predict.adl$x
plot(predict.adl$x)
plot(predict.adl$x, col = test[, -1627])
plot(predict.adl$x, col = as.integer(test[, -1627])
)
plot(predict.adl$x, col = as.integer(test[, -1627]))
test[, -1627]
plot(predict.adl$x, col = as.integer(test[, 1627]))
?lda
predict.adl
plot(res.adl, panel = panel.lda)
plot(res.adl, panel = panel.lda, dimen = 2)
plot(res.adl, panel = panel.lda, dimen = 1)
plot(res.adl, panel = panel.lda, dimen = 3)
res.adl$scaling
dim(train)
projected_data = as.matrix(train[, -1627]) %*% res.adl$scaling
projected_data = as.matrix(df[, -1627]) %*% res.adl$scaling
dim(df)
dim(res.adl$scaling)
dim(projected_data)
plot(projected_data, col = df[, 1627])
plot(projected_data, col = df[, 1627], pch = 19)
?lda
library(R.matlab)
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
jaffe = readMat('jaffe.mat')
jaffe$y = as.factor(jaffe$y)
jaffe = data.frame(jaffe$X, jaffe$y)
umist = readMat('UMIST1.mat')
umist$y = as.factor(umist$y)
umist = data.frame(umist$X, umist$y)
mnist = readMat('MNIST5.mat')
mnist$y = as.factor(mnist$y)
mnist = data.frame(mnist$X, mnist$y)
mfea = readMat('MFEAT1.mat')
mfea$y = as.factor(mfea$y)
mfea = data.frame(mfea$X, mfea$y)
coil20 = readMat('COIL20_1440n_1024d_20c.mat')
coil20$y = as.factor(coil20$y)
coil20 = data.frame(coil20$X, coil20$y)
usps = readMat('USPS.mat')
usps$y = as.factor(usps$y)
usps = data.frame(usps$X, usps$y)
optidigits = readMat('Optdigits.mat')
optidigits$y = as.factor(optidigits$y)
optidigits = data.frame(optidigits$X, optidigits$y)
pairs(optidigits[, 1:64], col = optidigits[, 65])
pairs(optidigits[, 1:10], col = optidigits[, 65])
pairs(optidigits[, 1:2], col = optidigits[, 65])
pairs(optidigits[, 1:3], col = optidigits[, 65])
pairs(jaffe[, 1:10], col = jaffe$jaffe.y)
pairs(jaffe[, 1:5], col = jaffe$jaffe.y)
jaffe1 = scale(jaffe)
jaffe[, -677] = scale(jaffe[, -677])
jaffe
jaffe$jaffe.y
library(FactoMineR)
jaffe.acp = PCA(jaffe[, -677], ncp = 2, scale.unit = T)
jaffe.acp = PCA(jaffe[, -677], ncp = 2, scale.unit = T, graph = F)
plot(jaffe.acp, choix = 'ind')
plot(jaffe.acp, choix = 'ind', habillage = jaffe[, 677])
jaffe[, 677]
jaffe.acp = PCA(jaffe, ncp = 2, scale.unit = T, graph = F)
jaffe.acp = PCA(jaffe, ncp = 2, scale.unit = T, graph = F, quanti.sup = 1:676)
jaffe.acp = PCA(jaffe, ncp = 2, scale.unit = T, graph = F, quali.sup = 677)
plot(jaffe.acp, choix = 'ind', habillage = 677)
jaffe.acp = PCA(jaffe, ncp = 2, scale.unit = F, graph = F, quali.sup = 677)
plot(jaffe.acp, choix = 'ind', habillage = 677)
jaffe.acp = PCA(jaffe, ncp = 2, scale.unit = F, graph = F, quali.sup = 677)
plot(jaffe.acp, choix = 'ind', habillage = 677)
jaffe.acp = PCA(jaffe, ncp = 2, scale.unit = T, graph = F, quali.sup = 677)
plot(jaffe.acp, choix = 'ind', habillage = 677)
mnist.acp = PCA(mnist, ncp = 2, scale.unit = T, graph = F, quali.sup = 785)
plot(mnist.acp, choix = 'ind')
mnist.acp = PCA(mnist, ncp = 2, scale.unit = F, graph = F, quali.sup = 785)
plot(mnist.acp, choix = 'ind')
plot(mnist.acp, choix = 'ind', habillage = 785)
umist.acp = PCA(umist, ncp = 2, scale.unit = T, graph = F, quali.sup = 645)
plot(umist.acp, choix = 'ind')
plot(umist.acp, choix = 'ind', habillage = 645)
mfea.acp = PCA(mfea, ncp = 2, scale.unit = F, graph = F, quali.sup = 241)
plot(mfea.acp, choix = 'ind')
plot(mfea.acp, choix = 'ind', habillage = 241)
coil20.acp = PCA(coil20.acp, ncp = 2, scale.unit = F, graph = F, quali.sup = 1025)
coil20.acp = PCA(coil20.acp, ncp = 2, scale.unit = F, graph = F, quali.sup = 1025)
coil20.acp = PCA(coil20, ncp = 2, scale.unit = F, graph = F, quali.sup = 1025)
plot(coil20.acp, choix = 'ind')
plot(coil20.acp, choix = 'ind', habillage = 1025)
usps.acp = PCA(usps, ncp = 2, scale.unit = F, graph = F, quali.sup = 257)
plot(usps.acp, choix = 'ind')
plot(usps.acp, choix = 'ind', habillage = 257)
optidigits.acp = PCA(optidigits, ncp = 2, scale.unit = F, graph = F, quali.sup = 65)
plot(optidigits.acp, choix = 'ind')
plot(optidigits.acp, choix = 'ind', habillage = 65)
install.packages('Rtsne')
library(Rtsne)
jaffe.tsne = Rtsne(jaffe[, -677], dims = 2, perplexity = 30, max_iter = 100)
jaffe.tsne
jaffe.tsne = Rtsne(jaffe[, -677], dims = 2, perplexity = 30, max_iter = 500)
plot(jaffe.tsne$Y, t = 'n')
dim(jaffe.tsne$Y)
plot(jaffe.tsne$Y)
plot(jaffe.tsne$Y, col = jaffe[, 677])
jaffe.tsne = Rtsne(jaffe[, -677], dims = 2, perplexity = 30, max_iter = 1000)
plot(jaffe.tsne$Y)
plot(jaffe.tsne$Y, col = jaffe[, 677])
umist.tsne = Rtsne(umist[, -645], dims = 2, perplexity = 30, max_iter = 500)
dim(umist)
umist.tsne = Rtsne(umist[, -645], dims = 2, perplexity = 30, max_iter = 500, check_duplicates = F)
plot(umist.tsne$Y)
plot(umist.tsne$Y, col = umist[, 645])
duplicated(umist)
umist_unique = unique(umist)
umist.tsne = Rtsne(umist_unique[, -645], dims = 2, perplexity = 30, max_iter = 500, check_duplicates = F)
umist.tsne = Rtsne(umist_unique[, -645], dims = 2, perplexity = 30, max_iter = 500)
plot(umist.tsne$Y)
plot(umist.tsne$Y, col = umist_unique[, 645])
mnist.tsne = Rtsne(mnist[, -785], dims = 2, perplexity = 30, max_iter = 500)
plot(mnist.tsne$Y)
plot(mnist.tsne$Y, col = mnist[, 785])
mnist.tsne = Rtsne(mnist[, -785], dims = 2, perplexity = 50, max_iter = 1000)
plot(mnist.tsne$Y)
plot(mnist.tsne$Y, col = mnist[, 785])
text(mnist.tsne$Y, col = mnist[, 785])
text(mnist.tsne$Y, labels = mnist[, 785], col = mnist[, 785])
text(mnist.tsne$Y, labels = mnist[, 785])
text(mnist.tsne$Y, labels = mnist[, 785], col = colors(mnist[, 785]))
plot(mnist.tsne$Y, col = mnist[, 785])
plot(mnist.tsne$Y, col = mnist[, 785], pch = c(1:10)[as.numeric(mnist[, 785])])
plot(mnist.tsne$Y, col = mnist[, 785], type = 'n')
plot(mnist.tsne$Y, col = mnist[, 785], pch = 19)
mfea.tsne = Rtsne(mfea[, -241], dims = 2, perplexity = 50, max_iter = 5000)
mfea.tsne = Rtsne(mfea[, -241], dims = 2, perplexity = 50, max_iter = 5000, check_duplicate = F)
plot(mfea.tsne$Y)
plot(mfea.tsne$Y, col = mnist[, 241], pch = 19)
plot(mfea.tsne$Y, col = mfea[, 241], pch = 19)
plot(mfea.acp, choix = 'ind', habillage = 241)
plot(mfea.tsne$Y, col = mfea[, 241])
coil20.tsne = Rtsne(mfea[, -1025], dims = 2, perplexity = 50, max_iter = 5000, check_duplicate = F)
plot(coil20.tsne$Y)
plot(coil20.tsne$Y, col = coil20[1025])
plot(coil20.tsne$Y, col = coil20[, 1025])
coil20.tsne = Rtsne(coil20[, -1025], dims = 2, perplexity = 50, max_iter = 1000, check_duplicate = F)
plot(coil20.tsne$Y)
plot(coil20.tsne$Y, col = coil20[, 1025])
plot(mnist.acp, choix = 'ind', habillage = 785)
plot(mnist.tsne$Y, col = mnist[, 785])
plot(coil20.acp, choix = 'ind', habillage = 1025)
plot(coil20.tsne$Y, col = coil20[, 1025])
usps.tsne = Rtsne(usps[, -257], dims = 2, perplexity = 50, max_iter = 1000, check_duplicate = F)
plot(usps.tsne$Y)
plot(usps.tsne$Y, col = usps[, 257])
optidigits.tsne = Rtsne(optidigits[, -65], dims = 2, perplexity = 50, max_iter = 1000, check_duplicate = F)
plot(optidigits.tsne$Y)
plot(optidigits.tsne$Y, col = optidigits[65])
plot(optidigits.tsne$Y, col = optidigits[, 65])
plot(optidigits.acp, choix = 'ind', habillage = 65)
install.packages('Nbclust')
install.packages('NbClust')
library(NbClust)
?NbClust
plot(optidigits.tsne$Y, col = optidigits[, 65])
plot(optidigits.tsne$Y)
plot(optidigits.acp, choix = 'ind', habillage = 65)
plot(optidigits.acp, choix = 'ind')
plot(optidigits.tsne$Y)
plot(usps.tsne$Y)
plot(coil20.tsne$Y)
plot(coil20.tsne$Y, col = coil20[, 1025])
?NbClust
jaffe.nbclust.kmeans = NbClust(jaffe[, -677], method = 'kmeans', mean.nc = 2, max.nc = 30)
jaffe.nbclust.kmeans = NbClust(jaffe[, -677], method = 'kmeans', min.nc = 2, max.nc = 30)
a = scale(jaffe)
a = scale(jaffe)
dim(jaffe)
jaffe_c = scale(jaffe[, -677])
jaffe_c
dim(jaffe_c)
jaffe[, -677] = scale(jaffe[, -677])
jaffe
dim(jaffe)
jaffe.nbclust.kmeans = NbClust(jaffe[, -677], method = 'kmeans', min.nc = 2, max.nc = 30)
jaffe.nbclust.kmeans = NbClust(jaffe[, -677], method = 'kmeans', min.nc = 2, max.nc = 20)
jaffe.nbclust.kmeans = NbClust(jaffe[, -677], method = 'kmeans', min.nc = 2, max.nc = 10)
dim(jaffe)
jaffe.nbclust.kmeans = NbClust(jaffe[, -677], method = 'single', min.nc = 2, max.nc = 30)
jaffe.nbclust.kmeans = NbClust(jaffe[, -677], method = 'single', min.nc = 2, max.nc = 30, index = 'all')
jaffe.nbclust.kmeans = NbClust(jaffe[, -677], method = 'kmeans', min.nc = 2, max.nc = 30, index = 'all')
summary(jaffe)
jaffe.nbclust.kmeans = NbClust(jaffe[, -677], method = 'kmeans', min.nc = 2, max.nc = 30, index = 'all')
jaffe.nbclust.kmeans = NbClust(jaffe[, -677], method = 'kmeans', min.nc = 2, max.nc = 5, index = 'all')
jaffe.nbclust.kmeans = NbClust(jaffe[, -677], method = 'kmeans', min.nc = 2, max.nc = 3, index = 'all')
jaffe.nbclust.kmeans = NbClust(iris[, -5], method = 'kmeans', min.nc = 2, max.nc = 3, index = 'all')
jaffe.nbclust.kmeans = NbClust(iris[, -5], method = 'kmeans', min.nc = 2, max.nc = 5, index = 'all
jaffe.nbclust.kmeans = NbClust(iris[, -5], method = 'kmeans', min.nc = 2, max.nc = 5, index = 'all)
jaffe.nbclust.kmeans = NbClust(iris[, -5], method = 'kmeans', min.nc = 2, max.nc = 5, index = 'all')
jaffe.nbclust.kmeans = NbClust(as.matrix(jaffe[, -677]), method = 'kmeans', min.nc = 2, max.nc = 5, index = 'all')
?NbClust
jaffe = readMat('jaffe.mat')
jaffe$y = as.factor(jaffe$y)
jaffe = data.frame(jaffe$X, jaffe$y)
kmeans(jaffe[, -677],centers = 5)
jaffe.acp$eig
dim(jaffe.acp$eig)
jaffe.acp$var$coord
?PCA
jaffe.acp = PCA(jaffe, ncp = 200, scale.unit = F, graph = F, quali.sup = 677)
dim(jaffe.acp$eig)
dim(jaffe.acp$ind$coord)
jaffe.nbclust.kmeans = NbClust(jaffe.acp$ind$coord, method = 'kmeans', min.nc = 2, max.nc = 30, index = 'all')
jaffe.nbclust.kmeans = NbClust(jaffe.acp$ind$coord, method = 'kmeans', min.nc = 2, max.nc = 20, index = 'all')
jaffe.acp = PCA(jaffe, ncp = 50, scale.unit = F, graph = F, quali.sup = 677)
jaffe.nbclust.kmeans = NbClust(jaffe.acp$ind$coord, method = 'kmeans', min.nc = 2, max.nc = 20, index = 'all')
jaffe.nbclust.single = NbClust(jaffe.acp$ind$coord, method = 'single', min.nc = 2, max.nc = 20, index = 'all')
umist.acp = PCA(umist, ncp = 50, scale.unit = F, graph = F, quali.sup = 645)
mnist.acp = PCA(mnist, ncp = 50, scale.unit = F, graph = F, quali.sup = 785)
mnist.nbclust.kmeans = NbClust(mnist, method = 'kmeans', min.nc = 2, max.nc = 20, index = 'all')
mnist.nbclust.kmeans = NbClust(mnist[, -785], method = 'kmeans', min.nc = 2, max.nc = 20, index = 'all')
mnist.nbclust.kmeans = NbClust(mnist.acp$ind$coord, method = 'kmeans', min.nc = 2, max.nc = 20, index = 'all')
mnist.acp = PCA(mnist, ncp = 10, scale.unit = F, graph = F, quali.sup = 785)
mnist.nbclust.kmeans = NbClust(mnist.acp$ind$coord, method = 'kmeans', min.nc = 2, max.nc = 5, index = 'all')
mnist.nbclust.kmeans = NbClust(mnist.acp$ind$coord, method = 'single', min.nc = 2, max.nc = 5, index = 'all')
install.packages('Rmixmod')
install.packages('mclust')
library(Rmixmod)
library(mclust)
citation('mclust')
jaffe.mclust = Mclust(jaffe[, -677], 2)
jaffe.mclust
jaffe.mclust$BIC
jaffe.mclust$classification
MclustDR(jaffe.mclust)
dr = MclustDR(jaffe.mclust)
plot(dr, what = 'scatterplot')
plot(dr, what = 'evalues')
jaffe.rmixmod = mixmodCluster(jaffe[, -677], 2)
jaffe.rmixmod
library('clustrd')
library(R.matlab)
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
data = readMat('jaffe.mat')
data$y = as.factor(data$y)
data = data.frame(data$X, date$y)
library(R.matlab)
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('jaffe.mat')
donnees$y = as.factor(donnees$y)
donnees = data.frame(donnees$X, donnees$y)
habillage = dim(donnees)[2]
habillage
library(kernlab)
data(spirals)
sc <- specc(spirals,kernel = "rbfdot",centers=2)
plot(spirals, col=sc)
sc
sc
sc@kernelf
sc@kernelf
sc@centers
sc@size
sc@withinss
sc@.Data
library(R.matlab)
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
donnees = readMat('jaffe.mat')
donnees$y = as.factor(donnees$y)
donnees = data.frame(donnees$X, donnees$y)
habillage = dim(donnees)[2]
library(FactoMineR)
library(Rtsne)
donnees.acp = PCA(donnees, ncp = 30, scale.unit = F, graph = F, quali.sup = habillage)
plot(donnees.acp, choix = 'ind')
dev.off()
plot(donnees.acp, choix = 'ind')
plot(donnees.acp, choix = 'ind', habillage = habillage)
donnees.tsne = Rtsne(donnees[, -habillage], dims = 2, perplexity = 30, max_iter = 1000, check_duplicate = F)
plot(donnees.tsne$Y)
plot(donnees.tsne$Y, col = donnees[, habillage])
plot(donnees.tsne$Y, col = donnees[, habillage], xlab = 't-SNE dim 1', ylab = 't-SNE dim 2')
?specc
library(NbClust)
donnees.acp$ind$coord
donnees.acp = PCA(donnees, ncp = 30, scale.unit = T, graph = F, quali.sup = habillage)
donnees.nbclust.kmeans = NbClust(donnees.acp$ind$coord, method = 'kmeans', min.nc = 2, max.nc = 20, index = 'all')
donnees.nbclust.single = NbClust(donnees.acp$ind$coord, method = 'single', min.nc = 2, max.nc = 20, index = 'all')
donnees.nbclust.average = NbClust(donnees.acp$ind$coord, method = 'average', min.nc = 2, max.nc = 20, index = 'all')
donnees.nbclust.complete = NbClust(donnees.acp$ind$coord, method = 'complete', min.nc = 2, max.nc = 20, index = 'all')
donnees.nbclust.ward = NbClust(donnees.acp$ind$coord, method = 'ward.D', min.nc = 2, max.nc = 20, index = 'all')
donnees.sc = specc(donnees[, -habillage], kernel = "rbfdot", centers = 20)
library(kernlab)
donnees.sc = specc(donnees[, -habillage], kernel = "rbfdot", centers = 20)
donnees[, -habillage] = scale(donnees[, -habillage], center = T, scale = T)
donnees.sc = specc(donnees[, -habillage], kernel = "rbfdot", centers = 20)
library(kernlab)
donnees.sc = specc(donnees[, -habillage], kernel = "rbfdot", centers = 20)
donnees.sc = specc(donnees, kernel = "rbfdot", centers = 20)
specc(iris[, -5], kernel = 'rbfdot', centers = 20)
specc(iris[, -5], kernel = 'rbfdot', centers = 5)
iris[, -5]
specc(iris[, -5], kernel = 'rbfdot', centers = 2)
rm(list = ls())
