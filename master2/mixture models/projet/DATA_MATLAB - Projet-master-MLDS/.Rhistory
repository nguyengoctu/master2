plot(res.isomap$dim2, col = gordon[, 1627], pch = 19)
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = 1)
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = 2)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19)
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = 3)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19)
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = 4)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19)
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = 5)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19)
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = 10)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19)
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = 20)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19)
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = 50)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19)
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = 100)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19)
par(mfrow=c(3, 3))
par(mfrow=c(3, 3))
K = c(2, 3, 5, 10, 15, 20, 30, 50)
for (k in K){
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = k)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19)
}
par(mfrow=c(3, 3))
K = c(2, 3, 5, 10, 15, 20, 30, 50, 100)
for (k in K){
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = k)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19, main = paste('K =',k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
par(mfrow=c(3, 3))
K = c(2, 3, 5, 10, 15, 20, 30, 50, 100)
for (k in K){
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = k)
plot(res.isomap$dim2, pch = 19, main = paste('K =',k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
?LLE
par(mfrow=c(3, 3))
for (k in K){
res.lle = LLE(as.matrix(gordon[, -1627]), dim = 2, k = k)
plot(res.lle$dim2, col = gordon[, 1627], pch = 19, main = paste('K =', k), x;ab = 'MDS dim1', ylab = 'MDS dim2')
}
for (k in K){
res.lle = LLE(as.matrix(gordon[, -1627]), dim = 2, k = k)
plot(res.lle$dim2, col = gordon[, 1627], pch = 19, main = paste('K =', k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
lle = LLE(as.matrix(gordon[, -1627]), dim = 2, k = 5)
lle
for (k in K){
res.lle = LLE(as.matrix(gordon[, -1627]), dim = 2, k = k)
plot(res.lle, col = gordon[, 1627], pch = 19, main = paste('K =', k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
install.packages('som')
library(som)
?som
data(yeast
)
yeast <- yeast[, -c(1, 11)]
yeast.f <- filtering(yeast)
yeast.f.n <- normalize(yeast.f)
foo <- som(yeast.f.n, xdim=5, ydim=6)
foo <- som(yeast.f.n, xdim=5, ydim=6, topol="hexa", neigh="gaussian")
plot(foo)
dev.off()
plot(foo)
library(kohonen)
res.som = som(gordon[, -1627], grid = somgrid(10, 10, topo = 'rectangular'))
res.som = som(as.matrix(gordon[, -1627]), grid = somgrid(10, 10, topo = 'rectangular'))
res.som$codes
res.som$distances
res.som$changes
color1 = tricolor(res.som$grid)
plot(res.som, type = 'mapping', bgcol = rgb(color10))
plot(res.som, type = 'mapping', bgcol = rgb(color1))
plot(res.som, type = 'mapping')
plot(res.som, type = 'mapping', label = gordon[, 1627])
plot(res.som, type = 'mapping', label = gordon[, 1627], pch = 19)
plot(res.som, type = 'mapping', label = gordon[, 1627], pch = 1)
plot(res.som, type = 'mapping', label = gordon[, 1627], pch = 19)
plot(res.som)
plot(res.som, type = 'mapping', col = gordon[, 1627], pch = 19)
plot(res.som, type = 'mapping', bgcol = rgb(color1))
plot(res.som, type = 'mapping', col = gordon[, 1627], pch = 19)
plot(res.som, type = 'quality')
plot(res.som, type = 'counts')
plot(res.som, type = 'codes')
coolBlueHotRed = function(n, alpha = 1)
{
rainbow(n, end=4/6, alpha=alpha)[n:1]
}
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed)
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed)
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed)
plot(res.som, type = 'counts')
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed)
plot(res.som, type = 'mapping', col = gordon[, 1627], pch = 19)
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed)
plot(res.som, type = 'codes')
plot(res.som, type = 'property')
res.som$codes
plot(res.som, type = 'property', property = res.som$codes[, 1])
plot(res.som, type = 'property', property = res.som$codes[, 3])
mydata <- res.som$codes
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
dim(mydata)
res.som$codes
dim(res.som$codes)
mydata <- res.som$codes[[1]]
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
plot(wss)
som_cluster <- cutree(hclust(dist(som_model$codes)), 6)
som_cluster <- cutree(hclust(dist(res.som$codes[[1]])), 2)
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
plot(res.som, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
plot(res.som, type="mapping", bgcol = som_cluster, main = "Clusters")
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed)
plot(res.som, type = 'mapping')
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed)
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed, col = gordon[, 1627])
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed)
plot(res.som, type = 'mapping')
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed)
plot(res.som, type = 'dist.neighbours')
plot(res.som, type = 'mapping', col = gordon[, 1627], pch = 19)
res.som = som(as.matrix(gordon[, -1627]), grid = somgrid(15, 15, topo = 'hexagonal'))
res.som = som(as.matrix(gordon[, -1627]), grid = somgrid(10, 10, topo = 'hexagonal'))
plot(res.som, type = 'mapping', bgcol = rgb(color1))
plot(res.som, type = 'mapping', col = gordon[, 1627], pch = 19)
plot(res.som, type = 'quality')
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed)
mydata <- res.som$codes[[1]]
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
plot(wss)
som_cluster <- cutree(hclust(dist(res.som$codes[[1]])), 2)
plot(res.som, type="mapping", bgcol = som_cluster, main = "Clusters")
plot(res.som, type = 'mapping', col = gordon[, 1627], pch = 19)
plot(res.som, type = 'dist.neighbours', palette.name = coolBlueHotRed)
plot(res.som, type = 'dist.neighbours')
data("iris")
iris.som = som(iris[, -5])
iris.som = som(as.matrix(iris[, -5]))
plot(iris.som, type = 'dist.neighbours')
iris.som = som(as.matrix(iris[, -5]), grid = somgrid(10, 10, topo = 'hexagonal'))
plot(iris.som, type = 'dist.neighbours')
plot(iris.som, type = 'mapping', col = iris[, 5])
plot(iris.som, type = 'counts')
plot(iris.som, type = 'mapping', col = iris[, 5])
plot(iris.som, type = 'dist.neighbours')
data = read.table('/media/ngoctu/769829E69829A599/workspace/master2/master2/exploration_visuelle_des_donnees/Projet_Visualisation/gordon-2002_database.txt',
sep = '\t')
X = t(data[-(1:2), ])[-1, ]
shape = dim(X)
y = t(data[2, ])
y = y[-1]
y = as.factor(y)
X = mapply(X, FUN = as.numeric)
X = matrix(data = X, nrow = shape[1], ncol = shape[2])
X = scale(X, center = T, scale = T)
gordon = data.frame(X, y)
set.seed(2018)
tr = sample(1:nrow(X), as.integer(0.8 * nrow(X)))
train = gordon[tr, ]
test = gordon[-tr, ]
library(FactoMineR)
res.pca = PCA(gordon, scale.unit = T, ncp = 2, quali.sup = 1627)
res.pca = PCA(gordon, scale.unit = T, ncp = 2, quali.sup = 1627, graph = F)
plot.PCA(res.pca, choix = 'ind',)
plot.PCA(res.pca, choix = 'ind')
plot.PCA(res.pca, choix = 'ind', habillage = 1627)
library(MASS)
res.adl = lda(y ~., data = train)
predict.adl = predict(res.adl, test[, -1627])
table(predict.adl$class, test[, 1627])
projected_data = as.matrix(gordon[, -1627]) %*% res.adl$scaling
plot(projected_data, col = gordon[, 1627], pch = 19)
D = dist(gordon[, -1627])
res.mds = cmdscale(D)
plot(res.mds, pch = 19)
plot(res.mds, col = gordon[, 1627], pch = 19)
library(RDRToolbox)
par(mfrow=c(3, 3))
K = c(2, 3, 5, 10, 15, 20, 30, 50, 100)
for (k in K){
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = k)
plot(res.isomap$dim2, pch = 19, main = paste('K =',k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
for (k in K){
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = k)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19, main = paste('K =',k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
par(mfrow=c(3, 3))
for (k in K){
res.lle = LLE(as.matrix(gordon[, -1627]), dim = 2, k = k)
plot(res.lle, pch = 19, main = paste('K =', k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
for (k in K){
res.lle = LLE(as.matrix(gordon[, -1627]), dim = 2, k = k)
plot(res.lle, col = gordon[, 1627], pch = 19, main = paste('K =', k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
library(kohonen)
res.som = som(as.matrix(gordon[, -1627]), grid = somgrid(10, 10, topo = 'hexagonal'))
plot(res.som, type = 'mapping', bgcol = rgb(color1))
dev.off()
plot(res.som, type = 'mapping', bgcol = rgb(color1))
plot(res.som, type = 'mapping', col = gordon[, 1627], pch = 19)
plot(res.som, type = 'quality')
plot(res.som, type = 'mapping', col = gordon[, 1627], pch = 19)
plot(res.som, type = 'dist.neighbours')
plot(iris.som, type = 'dist.neighbours')
plot(iris.som, type = 'mapping', col = iris[, 5])
X = t(data[-(1:2), ])[-1, ]
X = mapply(X, FUN = as.numeric)
X = matrix(data = X, nrow = shape[1], ncol = shape[2])
gordon = data.frame(X, y)
res.som = som(as.matrix(gordon[, -1627]), grid = somgrid(10, 10, topo = 'hexagonal'))
plot(res.som, type = 'mapping', col = gordon[, 1627], pch = 19)
plot(res.som, type = 'dist.neighbours')
data2 = read.table('/media/ngoctu/769829E69829A599/workspace/master2/master2/exploration_visuelle_des_donnees/Projet_Visualisation/pomeroy-2002-v2_database.txt',
sep = '\t')
data2
View(data2)
dim(data2)
X = t(data1[-(1:2), ])[-1, ]
X = t(data2[-(1:2), ])[-1, ]
dim(X)
?as.factor
shape = dim(X)
y = t(data2[2, ])
y
y = y[-1]
y = as.factor(y)
y
X = mapply(X, FUN = as.numeric)
X = matrix(data = X, nrow = shape[1], ncol = shape[2])
summary(X)
summary(y)
X = scale(X, center = T, scale = T)
dim(X)
pomeroy = data.frame(X, y)
set.seed(2018)
tr = sample(1:nrow(X), as.integer(0.8 * nrow(X)))
train = pomeroy[tr, ]
test = pomeroy[-tr, ]
dim(test)
?PCA
dim(pomeroy)
res.pca = PCA(pomeroy, scale.unit = T, ncp = 2, quali.sup = 1380, graph = F)
plot.PCA(res.pca, choix = 'ind')
plot.PCA(res.pca, choix = 'ind', habillage = 1627)
plot.PCA(res.pca, choix = 'ind', habillage = 1380)
library(MASS)
res.adl = lda(y ~., data = train)
predict.adl = predict(res.adl, test[, -1380])
table(predict.adl$class, test[, 1380])
dim(res.adl$scaling)
projected_data = as.matrix(gordon[, -1380]) %*% res.adl$scaling[, 1:2]
projected_data = as.matrix(pomeroy[, -1380]) %*% res.adl$scaling[, 1:2]
plot(projected_data, col = pomeroy[, 1380], pch = 19)
install.packages("plot3D")
projected_data_3D = as.matrix(pomeroy[, -1380]) %*% res.adl$scaling[, 1:3]
scatter3D(projected_data_3D, col = pomeroy[, 1380])
library(plot3D)
scatter3D(projected_data_3D, col = pomeroy[, 1380])
scatter3D(x = projected_data_3D[, 1], y = projected_data_3D[, 2], z = projected_data_3D[, 3], col = pomeroy[, 1380])
scatter3D(x = projected_data_3D[, 1], y = projected_data_3D[, 2], z = projected_data_3D[, 3], col = pomeroy[, 1380], xlab = 'LDA1')
scatter3D(x = projected_data_3D[, 1], y = projected_data_3D[, 2], z = projected_data_3D[, 3], col = pomeroy[, 1380], xlab = 'LDA1', ylab = 'LDA2', zlab = 'LDA3')
D = dist(pomeroy[, -1380])
res.mds = cmdscale(D)
plot(res.mds, pch = 19)
plot(res.mds, col = pomeroy[, 1380], pch = 19)
par(mfrow=c(2, 3))
K = c(2, 3, 5, 10, 15, 20)
for (k in K){
res.isomap = Isomap(as.matrix(pomeroy[, -1380]), k = k)
plot(res.isomap$dim2, pch = 19, main = paste('K =',k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
for (k in K){
res.isomap = Isomap(as.matrix(pomeroy[, -1380]), k = k)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19, main = paste('K =',k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
for (k in K){
res.isomap = Isomap(as.matrix(pomeroy[, -1380]), k = k)
plot(res.isomap$dim2, col = pomeroy[, 1380], pch = 19, main = paste('K =',k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
par(mfrow=c(2, 3))
for (k in K){
res.lle = LLE(as.matrix(pomeroy[, -1380]), dim = 2, k = k)
plot(res.lle, pch = 19, main = paste('K =', k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
for (k in K){
res.lle = LLE(as.matrix(pomeroy[, -1380]), dim = 2, k = k)
plot(res.lle, col = pomeroy[, 1380], pch = 19, main = paste('K =', k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
res.som = som(as.matrix(pomeroy[, -1380]), grid = somgrid(6, 6, topo = 'rectangular'))
plot(res.som, type = 'mapping', col = pomeroy[, 1380], pch = 19)
plot(res.som, type = 'quality')
plot(res.som, type = 'dist.neighbours')
plot(res.som, type = 'counts')
plot(res.som, type = 'codes')
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/exploration_visuelle_des_donnees/Projet_Visualisation/gordon/')
data1 = read.table('/media/ngoctu/769829E69829A599/workspace/master2/master2/exploration_visuelle_des_donnees/Projet_Visualisation/gordon-2002_database.txt',
sep = '\t')
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/exploration_visuelle_des_donnees/Projet_Visualisation/gordon/')
X = t(data1[-(1:2), ])[-1, ]
shape = dim(X)
y = t(data1[2, ])
y = y[-1]
y = as.factor(y)
X = mapply(X, FUN = as.numeric)
X = matrix(data = X, nrow = shape[1], ncol = shape[2])
X = scale(X, center = T, scale = T)
gordon = data.frame(X, y)
set.seed(2018)
tr = sample(1:nrow(X), as.integer(0.8 * nrow(X)))
train = gordon[tr, ]
test = gordon[-tr, ]
library(FactoMineR)
res.pca = PCA(gordon, scale.unit = T, ncp = 2, quali.sup = 1627, graph = F)
png(filename = '1. ACP1.png', width = 800, height = 600, units = 'px')
plot.PCA(res.pca, choix = 'ind')
dev.off()
png(filename = '1. ACP2.png', width = 800, height = 600, units = 'px')
plot.PCA(res.pca, choix = 'ind', habillage = 1627)
dev.off()
library(MASS)
res.adl = lda(y ~., data = train)
predict.adl = predict(res.adl, test[, -1627])
table(predict.adl$class, test[, 1627])
projected_data = as.matrix(gordon[, -1627]) %*% res.adl$scaling
png(filename = '2. ADL.png', width = 800, height = 600, units = 'px')
plot(projected_data, col = gordon[, 1627], pch = 19)
dev.off()
D = dist(gordon[, -1627])
res.mds = cmdscale(D)
png(filename = '3. MDS1.png', width = 800, height = 600, units = 'px')
plot(res.mds, pch = 19)
dev.off()
png(filename = '3. MDS2.png', width = 800, height = 600, units = 'px')
plot(res.mds, col = gordon[, 1627], pch = 19)
dev.off()
library(RDRToolbox)
png(filename = '4. Isomap1.png', width = 800, height = 600, units = 'px')
par(mfrow=c(3, 3))
K = c(2, 3, 5, 10, 15, 20, 30, 50, 100)
for (k in K){
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = k)
plot(res.isomap$dim2, pch = 19, main = paste('K =',k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
dev.off()
png(filename = '4. Isomap2.png', width = 800, height = 600, units = 'px')
par(mfrow=c(3, 3))
for (k in K){
res.isomap = Isomap(as.matrix(gordon[, -1627]), k = k)
plot(res.isomap$dim2, col = gordon[, 1627], pch = 19, main = paste('K =',k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
dev.off()
png(filename = '5. LLE1.png', width = 800, height = 600, units = 'px')
par(mfrow=c(3, 3))
for (k in K){
res.lle = LLE(as.matrix(gordon[, -1627]), dim = 2, k = k)
plot(res.lle, pch = 19, main = paste('K =', k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
dev.off()
png(filename = '5. LLE2.png', width = 800, height = 600, units = 'px')
par(mfrow=c(3, 3))
for (k in K){
res.lle = LLE(as.matrix(gordon[, -1627]), dim = 2, k = k)
plot(res.lle, col = gordon[, 1627], pch = 19, main = paste('K =', k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
dev.off()
library(kohonen)
res.som = som(as.matrix(gordon[, -1627]), grid = somgrid(10, 10, topo = 'rectangular'))
png(filename = '6. SOM.png', width = 800, height = 600, units = 'px')
par(mfrow = c(1, 2))
plot(res.som, type = 'mapping', col = gordon[, 1627], pch = 19)
plot(res.som, type = 'dist.neighbours')
dev.off()
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/exploration_visuelle_des_donnees/Projet_Visualisation/pomeroy/')
data2 = read.table('/media/ngoctu/769829E69829A599/workspace/master2/master2/exploration_visuelle_des_donnees/Projet_Visualisation/pomeroy-2002-v2_database.txt',
sep = '\t')
X = t(data2[-(1:2), ])[-1, ]
shape = dim(X)
y = t(data2[2, ])
y = y[-1]
y = as.factor(y)
X = mapply(X, FUN = as.numeric)
X = matrix(data = X, nrow = shape[1], ncol = shape[2])
summary(y)
X = scale(X, center = T, scale = T)
pomeroy = data.frame(X, y)
set.seed(2018)
tr = sample(1:nrow(X), as.integer(0.8 * nrow(X)))
train = pomeroy[tr, ]
test = pomeroy[-tr, ]
library(FactoMineR)
res.pca = PCA(pomeroy, scale.unit = T, ncp = 2, quali.sup = 1380, graph = F)
png(filename = '1. ACP1.png', width = 800, height = 600, units = 'px')
plot.PCA(res.pca, choix = 'ind')
dev.off()
png(filename = '1. ACP2.png', width = 800, height = 600, units = 'px')
plot.PCA(res.pca, choix = 'ind', habillage = 1380)
dev.off()
library(MASS)
res.adl = lda(y ~., data = train)
predict.adl = predict(res.adl, test[, -1380])
table(predict.adl$class, test[, 1380])
png(filename = '2. ADL1.png', width = 800, height = 600, units = 'px')
projected_data_2D = as.matrix(pomeroy[, -1380]) %*% res.adl$scaling[, 1:2]
plot(projected_data, col = pomeroy[, 1380], pch = 19)
dev.off()
library(plot3D)
projected_data_3D = as.matrix(pomeroy[, -1380]) %*% res.adl$scaling[, 1:3]
png(filename = '2. ADL2.png', width = 800, height = 600, units = 'px')
scatter3D(x = projected_data_3D[, 1], y = projected_data_3D[, 2], z = projected_data_3D[, 3], col = pomeroy[, 1380], xlab = 'LDA1', ylab = 'LDA2', zlab = 'LDA3')
dev.off()
D = dist(pomeroy[, -1380])
res.mds = cmdscale(D)
png(filename = '3. MDS1.png', width = 800, height = 600, units = 'px')
plot(res.mds, pch = 19)
dev.off()
png(filename = '3. MDS2.png', width = 800, height = 600, units = 'px')
plot(res.mds, col = pomeroy[, 1380], pch = 19)
dev.off()
library(RDRToolbox)
png(filename = '4. Isomap1.png', width = 800, height = 600, units = 'px')
par(mfrow=c(2, 3))
K = c(2, 3, 5, 10, 15, 20)
for (k in K){
res.isomap = Isomap(as.matrix(pomeroy[, -1380]), k = k)
plot(res.isomap$dim2, pch = 19, main = paste('K =',k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
dev.off()
png(filename = '4. Isomap2.png', width = 800, height = 600, units = 'px')
par(mfrow=c(2, 3))
for (k in K){
res.isomap = Isomap(as.matrix(pomeroy[, -1380]), k = k)
plot(res.isomap$dim2, col = pomeroy[, 1380], pch = 19, main = paste('K =',k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
dev.off()
png(filename = '5. LLE1.png', width = 800, height = 600, units = 'px')
par(mfrow=c(2, 3))
for (k in K){
res.lle = LLE(as.matrix(pomeroy[, -1380]), dim = 2, k = k)
plot(res.lle, pch = 19, main = paste('K =', k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
dev.off()
png(filename = '5. LLE2.png', width = 800, height = 600, units = 'px')
par(mfrow=c(2, 3))
for (k in K){
res.lle = LLE(as.matrix(pomeroy[, -1380]), dim = 2, k = k)
plot(res.lle, col = pomeroy[, 1380], pch = 19, main = paste('K =', k), xlab = 'MDS dim1', ylab = 'MDS dim2')
}
dev.off()
library(kohonen)
res.som = som(as.matrix(pomeroy[, -1380]), grid = somgrid(6, 6, topo = 'rectangular'))
png(filename = '6. SOM.png', width = 800, height = 600, units = 'px')
par(mfrow = c(1, 2))
plot(res.som, type = 'mapping', col = pomeroy[, 1380], pch = 19)
plot(res.som, type = 'dist.neighbours')
dev.off()
rm(list = ls())
install.packages('R.matlab')
library(R.matlab)
jaffe = readMat('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/jaffe.mat')
jaff
jaffe
?readMat
jaffe
dim(jaffe)
jaffe$X
dim(jaffe$X)
dim(jaffe$y)
jaffe$y
jaffe$y = as.factor(jaffe$y)
jaffe$y
setwd('/media/ngoctu/769829E69829A599/workspace/master2/master2/mixture models/projet/DATA_MATLAB - Projet-master-MLDS/')
jaffe = readMat('jaffe.mat')
jaffe$y = as.factor(jaffe$y)
umist = readMat('UMIST1.mat')
umist$nc
umist$y
umist$y = as.factor(umist$y)
mnist = readMat('MNIST5.mat')
mnist$y = as.factor(mnist$y)
mnist$y
mfea = readMat('MFEAT1.mat')
mfea$y = as.factor(mfea$y)
coil20 = readMat('COIL20_1440n_1024d_20c.mat')
coil20$y = as.factor(coil20$y)
usps = readMat('USPS.mat')
usps$y = as.factor(usps$y)
optidigits = readMat('Optdigits.mat')
optidigits$y = as.factor(optidigits$y)
jaffe = data.frame(jaffe$X, y)
jaffe = data.frame(jaffe$X, jaffe$y)
dim(jaffe)
jaffe$jaffe.y
jaffe$X1
umist = data.frame(umist$X, umist$y)
mnist = data.frame(mnist$X, mnist$y)
mfea = data.frame(mfea$X, mfea$y)
coil20 = data.frame(coil20$X, coil20$y)
usps = data.frame(usps$X, usps$y)
optidigits = data.frame(optidigits$X, optidigits$y)
library(MASS)
